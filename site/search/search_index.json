{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"Tricks%20and%20Tips/01_sql/","title":"SQL","text":""},{"location":"Tricks%20and%20Tips/01_sql/#1-show-duplicate-columns","title":"1. Show duplicate columns","text":"<p>Keywords: <code>HAVING COUNT(*) &gt; 1</code> <pre><code>SELECT *\nFROM tablename\nGROUP BY key_col1, key_col2\nHAVING COUNT(*) &gt; 1;\n</code></pre></p>"},{"location":"Tricks%20and%20Tips/01_sql/#2-delete-duplicate-rows","title":"2. Delete duplicate rows","text":"<pre><code>DELETE FROM tablename\nWHERE id IN (\n    SELECT id\n    FROM (\n        SELECT id,\n        ROW_NUMBER() OVER (\n            PARTITION BY col1, col2, col3\n            ORDER BY id\n        ) AS row_num\n        FROM tablename\n    ) t\n    WHERE t.row_num &gt; 1\n);\n</code></pre>"},{"location":"Tricks%20and%20Tips/01_sql/#3-use-coalesce-for-default-values","title":"3. Use COALESCE for default values","text":"<pre><code>SELECT COALESCE(column_name, 'Default Value') AS column_alias\nFROM tablename;\n</code></pre>"},{"location":"Tricks%20and%20Tips/01_sql/#4-pivot-table-using-case","title":"4. Pivot table using CASE","text":"<pre><code>SELECT\n    category,\n    SUM(CASE WHEN status = 'active' THEN 1 ELSE 0 END) AS active_count,\n    SUM(CASE WHEN status = 'inactive' THEN 1 ELSE 0 END) AS inactive_count\nFROM tablename\nGROUP BY category;\n</code></pre>"},{"location":"Tricks%20and%20Tips/01_sql/#5-running-totals-using-window-functions","title":"5. Running totals using window functions","text":"<pre><code>SELECT\n    date,\n    amount,\n    SUM(amount) OVER (ORDER BY date) AS running_total\nFROM transactions;\n</code></pre>"},{"location":"Tricks%20and%20Tips/01_sql/#6-find-nth-highest-value","title":"6. Find nth highest value","text":"<pre><code>SELECT DISTINCT amount\nFROM (\n    SELECT amount, DENSE_RANK() OVER (ORDER BY amount DESC) AS rnk\n    FROM tablename\n) ranked\nWHERE rnk = n;  -- Replace n with the desired rank (e.g., 2 for 2nd highest)\n</code></pre>"},{"location":"Tricks%20and%20Tips/01_sql/#7-use-explain-to-analyze-query-performance","title":"7. Use EXPLAIN to analyze query performance","text":"<pre><code>EXPLAIN SELECT * FROM tablename WHERE condition;\n</code></pre>"},{"location":"Tricks%20and%20Tips/01_sql/#8-handling-dates","title":"8. Handling dates","text":"<pre><code>-- Extract parts of a date\nSELECT\n    EXTRACT(YEAR FROM date_column) AS year,\n    EXTRACT(MONTH FROM date_column) AS month,\n    EXTRACT(DAY FROM date_column) AS day\nFROM tablename;\n\n-- Date arithmetic\nSELECT date_column + INTERVAL '1 day' AS tomorrow\nFROM tablename;\n</code></pre>"},{"location":"Tricks%20and%20Tips/01_sql/#9-string-aggregation","title":"9. String aggregation","text":"<pre><code>-- For MySQL\nSELECT\n    category,\n    GROUP_CONCAT(product_name SEPARATOR ', ') AS products\nFROM products\nGROUP BY category;\n\n-- For PostgreSQL\nSELECT\n    category,\n    STRING_AGG(product_name, ', ') AS products\nFROM products\nGROUP BY category;\n</code></pre>"},{"location":"Tricks%20and%20Tips/01_sql/#10-use-ctes-for-complex-queries","title":"10. Use CTEs for complex queries","text":"<pre><code>WITH ranked_products AS (\n    SELECT\n        product_name,\n        category,\n        price,\n        ROW_NUMBER() OVER (PARTITION BY category ORDER BY price DESC) AS price_rank\n    FROM products\n)\nSELECT *\nFROM ranked_products\nWHERE price_rank &lt;= 3;\n</code></pre>"},{"location":"Tricks%20and%20Tips/01_sql/#11-percentile-calculations","title":"11. Percentile calculations","text":"<pre><code>-- For PostgreSQL\nSELECT\n    category,\n    PERCENTILE_CONT(0.5) WITHIN GROUP (ORDER BY price) AS median_price\nFROM products\nGROUP BY category;\n</code></pre> <p>Remember to adjust syntax as needed for your specific database system, as some functions may vary between SQL dialects.</p>"},{"location":"Tricks%20and%20Tips/02_python/","title":"Python","text":""},{"location":"projects/bangkok_analysis/","title":"Bangkok Analysis","text":""},{"location":"tutorial/01_python/","title":"Basic Python","text":"<p>Welcome to this Basic Python Tutorial! This guide is designed to introduce you to the fundamental concepts of Python programming. Whether you're new to programming or coming from another language, this tutorial will help you get started with Python.</p>"},{"location":"tutorial/01_python/#1-introduction-to-python","title":"1. Introduction to Python","text":"<p>Python is a high-level, interpreted programming language known for its simplicity and readability. It's widely used in various fields, including web development, data science, artificial intelligence, and more.</p> <p>Key features of Python: - Easy to learn and read - Extensive standard library - Large and active community - Cross-platform compatibility</p>"},{"location":"tutorial/01_python/#2-setting-up-your-environment","title":"2. Setting Up Your Environment","text":"<p>To start programming in Python, you need to set up your development environment:</p> <ol> <li>Download and install Python from the official website.</li> <li>Choose an Integrated Development Environment (IDE) or text editor. Popular choices include:</li> <li>PyCharm</li> <li>Visual Studio Code</li> <li>IDLE (comes with Python installation)</li> </ol> <p>After installation, you can run Python from the command line or your chosen IDE.</p>"},{"location":"tutorial/01_python/#3-basic-syntax","title":"3. Basic Syntax","text":"<p>Python uses indentation to define code blocks. Here's a simple example:</p> <pre><code>if True:\n    print(\"This is indented\")\nprint(\"This is not indented\")\n</code></pre> <ul> <li>Use 4 spaces for indentation (preferred over tabs)</li> <li>Lines shouldn't be longer than 79 characters</li> <li>Use blank lines to separate functions and classes</li> </ul>"},{"location":"tutorial/01_python/#4-variables-and-data-types","title":"4. Variables and Data Types","text":"<p>Python is dynamically typed, meaning you don't need to declare variable types explicitly.</p> <pre><code># Integer\nx = 5\n\n# Float\ny = 3.14\n\n# String\nname = \"Python\"\n\n# Boolean\nis_fun = True\n\n# List\nmy_list = [1, 2, 3]\n\n# Dictionary\nmy_dict = {\"key\": \"value\"}\n</code></pre>"},{"location":"tutorial/01_python/#5-operators","title":"5. Operators","text":"<p>Python supports various operators:</p> <ul> <li>Arithmetic: <code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>, <code>//</code> (floor division), <code>%</code> (modulo), <code>**</code> (exponent)</li> <li>Comparison: <code>==</code>, <code>!=</code>, <code>&lt;</code>, <code>&gt;</code>, <code>&lt;=</code>, <code>&gt;=</code></li> <li>Logical: <code>and</code>, <code>or</code>, <code>not</code></li> <li>Assignment: <code>=</code>, <code>+=</code>, <code>-=</code>, <code>*=</code>, <code>/=</code>, etc.</li> </ul> <p>Example: <pre><code>x = 10\ny = 3\n\nprint(x + y)  # 13\nprint(x &gt; y)  # True\nprint(x and y)  # 3\n</code></pre></p>"},{"location":"tutorial/01_python/#6-control-flow","title":"6. Control Flow","text":""},{"location":"tutorial/01_python/#if-else-statements","title":"If-Else Statements","text":"<pre><code>x = 10\nif x &gt; 5:\n    print(\"x is greater than 5\")\nelif x == 5:\n    print(\"x is equal to 5\")\nelse:\n    print(\"x is less than 5\")\n</code></pre>"},{"location":"tutorial/01_python/#loops","title":"Loops","text":"<p>For loop: <pre><code>for i in range(5):\n    print(i)\n</code></pre></p> <p>While loop: <pre><code>count = 0\nwhile count &lt; 5:\n    print(count)\n    count += 1\n</code></pre></p>"},{"location":"tutorial/01_python/#7-functions","title":"7. Functions","text":"<p>Functions are defined using the <code>def</code> keyword:</p> <pre><code>def greet(name):\n    return f\"Hello, {name}!\"\n\nprint(greet(\"Python\"))  # Output: Hello, Python!\n</code></pre>"},{"location":"tutorial/01_python/#8-data-structures","title":"8. Data Structures","text":""},{"location":"tutorial/01_python/#lists","title":"Lists","text":"<pre><code>fruits = [\"apple\", \"banana\", \"cherry\"]\nfruits.append(\"date\")\nprint(fruits[0])  # apple\n</code></pre>"},{"location":"tutorial/01_python/#dictionaries","title":"Dictionaries","text":"<pre><code>person = {\n    \"name\": \"John\",\n    \"age\": 30,\n    \"city\": \"New York\"\n}\nprint(person[\"name\"])  # John\n</code></pre>"},{"location":"tutorial/01_python/#tuples","title":"Tuples","text":"<pre><code>coordinates = (10, 20)\nprint(coordinates[0])  # 10\n</code></pre>"},{"location":"tutorial/01_python/#9-modules-and-packages","title":"9. Modules and Packages","text":"<p>Python has a vast standard library and many third-party packages. You can import modules using the <code>import</code> keyword:</p> <pre><code>import math\nprint(math.pi)  # 3.141592653589793\n\nfrom datetime import datetime\nprint(datetime.now())\n</code></pre>"},{"location":"tutorial/01_python/#10-file-handling","title":"10. File Handling","text":"<p>Reading from a file: <pre><code>with open(\"example.txt\", \"r\") as file:\n    content = file.read()\n    print(content)\n</code></pre></p> <p>Writing to a file: <pre><code>with open(\"example.txt\", \"w\") as file:\n    file.write(\"Hello, Python!\")\n</code></pre></p>"},{"location":"tutorial/01_python/#11-error-handling","title":"11. Error Handling","text":"<p>Use try-except blocks to handle errors:</p> <pre><code>try:\n    result = 10 / 0\nexcept ZeroDivisionError:\n    print(\"Error: Division by zero!\")\n</code></pre>"},{"location":"tutorial/01_python/#12-next-steps","title":"12. Next Steps","text":"<p>After mastering these basics, you can explore:</p> <ul> <li>Object-Oriented Programming</li> <li>Web development with frameworks like Django or Flask</li> <li>Data analysis with libraries like Pandas and NumPy</li> <li>Machine Learning with scikit-learn and TensorFlow</li> </ul> <p>Remember, practice is key to improving your Python skills. Try to work on small projects and solve coding challenges regularly.</p> <p>Happy coding with Python!</p>"},{"location":"tutorial/02_sql/","title":"Basic SQL","text":"<p>Welcome to this comprehensive SQL tutorial! This guide will take you from a complete beginner to a proficient SQL user. Whether you're looking to manage databases, analyze data, or simply understand how data is stored and retrieved, this tutorial has got you covered.</p>"},{"location":"tutorial/02_sql/#1-introduction-to-databases-and-sql","title":"1. Introduction to Databases and SQL","text":"<p>SQL (Structured Query Language) is a standard language for storing, manipulating, and retrieving data in databases. Before diving into SQL, it's important to understand some key concepts:</p> <ul> <li>Database: A structured set of data.</li> <li>Table: A collection of related data entries consisting of columns and rows.</li> <li>Column: A vertical entity in a table that contains all information associated with a specific field in a table.</li> <li>Row: A horizontal entity in a table that represents a single, implicitly structured data item in a table.</li> </ul> <p>SQL is used with relational database management systems (RDBMS) like MySQL, PostgreSQL, SQLite, and Microsoft SQL Server.</p>"},{"location":"tutorial/02_sql/#2-setting-up-your-environment","title":"2. Setting Up Your Environment","text":"<p>To start practicing SQL, you'll need access to a database system. Here are a few options:</p> <ol> <li>SQLite: A lightweight, serverless database engine. Perfect for beginners and local development.</li> <li>MySQL: A popular open-source database system.</li> <li>PostgreSQL: Another powerful open-source database system.</li> </ol> <p>For this tutorial, we'll use SQLite due to its simplicity. You can download it from the official SQLite website.</p>"},{"location":"tutorial/02_sql/#3-basic-sql-queries","title":"3. Basic SQL Queries","text":"<p>Let's start with the most fundamental SQL command: SELECT.</p> <pre><code>SELECT column1, column2 FROM table_name;\n</code></pre> <p>This command retrieves data from one or more columns in a table.</p> <p>Example: <pre><code>SELECT first_name, last_name FROM employees;\n</code></pre></p> <p>To select all columns, you can use the asterisk (*):</p> <pre><code>SELECT * FROM employees;\n</code></pre>"},{"location":"tutorial/02_sql/#4-filtering-and-sorting-data","title":"4. Filtering and Sorting Data","text":""},{"location":"tutorial/02_sql/#where-clause","title":"WHERE Clause","text":"<p>The WHERE clause is used to filter records.</p> <pre><code>SELECT column1, column2 FROM table_name WHERE condition;\n</code></pre> <p>Example: <pre><code>SELECT first_name, last_name FROM employees WHERE department = 'Sales';\n</code></pre></p>"},{"location":"tutorial/02_sql/#order-by-clause","title":"ORDER BY Clause","text":"<p>The ORDER BY clause is used to sort the result set in ascending or descending order.</p> <pre><code>SELECT column1, column2 FROM table_name ORDER BY column1 [ASC|DESC];\n</code></pre> <p>Example: <pre><code>SELECT first_name, last_name FROM employees ORDER BY last_name ASC;\n</code></pre></p>"},{"location":"tutorial/02_sql/#5-joining-tables","title":"5. Joining Tables","text":"<p>Joins are used to combine rows from two or more tables based on a related column between them.</p> <pre><code>SELECT column1, column2\nFROM table1\nINNER JOIN table2 ON table1.column_name = table2.column_name;\n</code></pre> <p>Example: <pre><code>SELECT employees.first_name, employees.last_name, departments.department_name\nFROM employees\nINNER JOIN departments ON employees.department_id = departments.department_id;\n</code></pre></p>"},{"location":"tutorial/02_sql/#6-aggregating-data","title":"6. Aggregating Data","text":"<p>Aggregate functions perform a calculation on a set of values and return a single result.</p> <p>Common aggregate functions: - COUNT() - SUM() - AVG() - MAX() - MIN()</p> <p>Example: <pre><code>SELECT department, COUNT(*) as employee_count\nFROM employees\nGROUP BY department;\n</code></pre></p>"},{"location":"tutorial/02_sql/#7-subqueries-and-complex-queries","title":"7. Subqueries and Complex Queries","text":"<p>Subqueries are queries nested inside another query.</p> <p>Example: <pre><code>SELECT first_name, last_name\nFROM employees\nWHERE department_id IN (SELECT department_id FROM departments WHERE location = 'New York');\n</code></pre></p>"},{"location":"tutorial/02_sql/#8-modifying-data","title":"8. Modifying Data","text":""},{"location":"tutorial/02_sql/#insert","title":"INSERT","text":"<p>To add new records to a table:</p> <pre><code>INSERT INTO table_name (column1, column2, column3)\nVALUES (value1, value2, value3);\n</code></pre>"},{"location":"tutorial/02_sql/#update","title":"UPDATE","text":"<p>To modify existing records:</p> <pre><code>UPDATE table_name\nSET column1 = value1, column2 = value2\nWHERE condition;\n</code></pre>"},{"location":"tutorial/02_sql/#delete","title":"DELETE","text":"<p>To remove records from a table:</p> <pre><code>DELETE FROM table_name WHERE condition;\n</code></pre>"},{"location":"tutorial/02_sql/#9-creating-and-modifying-tables","title":"9. Creating and Modifying Tables","text":""},{"location":"tutorial/02_sql/#create-table","title":"CREATE TABLE","text":"<p>To create a new table:</p> <pre><code>CREATE TABLE table_name (\n    column1 datatype,\n    column2 datatype,\n    column3 datatype\n);\n</code></pre>"},{"location":"tutorial/02_sql/#alter-table","title":"ALTER TABLE","text":"<p>To modify an existing table:</p> <pre><code>ALTER TABLE table_name\nADD column_name datatype;\n</code></pre>"},{"location":"tutorial/02_sql/#10-advanced-sql-concepts","title":"10. Advanced SQL Concepts","text":"<p>As you progress, you'll encounter more advanced SQL concepts such as:</p> <ul> <li>Transactions</li> <li>Stored Procedures</li> <li>Triggers</li> <li>Views</li> <li>Indexing</li> </ul> <p>These topics are crucial for database optimization and advanced data manipulation.</p>"},{"location":"tutorial/02_sql/#conclusion","title":"Conclusion","text":"<p>This README provides a step-by-step guide to learning SQL. Remember, practice is key to mastering SQL. Try writing queries, experiment with different commands, and don't be afraid to make mistakes \u2013 that's how you learn!</p> <p>Happy querying!</p>"}]}